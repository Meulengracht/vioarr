/**
 * Vioar Window Manager Protocol
 * Defines the various services that together provide functionality for the
 * window management service.
 */

import "types"

namespace wm

/**
 * Id's in Vioarr must be non-zero, they are determined by each client
 * and are scoped to each client, thus it is up to the client to use their
 * own Id system. The Id system must hold up these rules to work properly, otherwise
 * the id will be rejected by the server. Id's must be non-zero, and they must not be
 * higher than 0x80000000, as id's above this are reserved for global entities.
 */
service core (80) {
    func get_objects() : () = 1;
    func sync(uint32 serial) : () = 2;

    event sync : (uint32 serial) = 3;
    event error : (uint32 id, int errorCode, string description) = 4;
    event object : (uint32 id, ulong handle, object_type type) = 5;
    event destroy : (uint32 id) = 6;
}

service screen (81) {
    func get_properties(uint32 id) : () = 1;
    func get_modes(uint32 id) : () = 2;
    func set_scale(uint32 id, int scale) : () = 3;
    func set_transform(uint32 id, transform transform) : () = 4;

    /**
     * Creates a new surface that binds to the screen provided. Surfaces are root objects that present as their
     * own element on the screen. Surfaces are initially not shown before they have been bound with a buffer.
     * 
     * @param x The x-origin value for the window, this is the x-coordinate for which the window will spawn.
     *          If none is desired, pass -1.
     * @param y The y-origin value for the window, this is the y-coordinate for which the window will spawn.
     *          If none is desired, pass -1.
     */
    func create_surface(uint32 screenId, uint32 surfaceId, int x, int y, int width, int height) : () = 5;

    event properties : (uint32 id, int x, int y, transform transform, int scale) = 6;
    event mode : (uint32 id, mode_attributes attributes, int resolutionX, int resolutionY, int refreshRate) = 7;
}

service memory (82) {
    func create_pool(uint32 poolId, ulong handle, int size) : () = 1;
}

service memory_pool (83) {
    func create_buffer(uint32 poolId, uint32 bufferId, int offset, int width, int height, int stride, pixel_format format, uint flags) : () = 1;
    func destroy(uint32 id) : () = 2;
}

service surface (84) {
    func get_formats(uint32 id) : () = 1;
    func set_buffer(uint32 surfaceId, uint32 bufferId) : () = 2;
    func invalidate(uint32 id, int x, int y, int width, int height) : () = 3;
    func set_drop_shadow(uint32 id, int x, int y, int width, int height) : () = 4;
    func set_input_region(uint32 id, int x, int y, int width, int height) : () = 5;
    func add_subsurface(uint32 parentId, uint32 childId, int x, int y) : () = 6;
    func resize_subsurface(uint32 id, int width, int height) : () = 7;
    func move_subsurface(uint32 id, int x, int y) : () = 8;
    func request_fullscreen_mode(uint32 id, fullscreen_mode mode) : () = 9;
    func request_level(uint32 id, int level) : () = 10;
    func request_frame(uint32 id) : () = 11;
    func request_focus(uint32 id) : () = 12;
    func transfer_focus(uint32 gid) : () = 13;
    func commit(uint32 id) : () = 14;
    func resize(uint32 id, uint32 pointerId, surface_edge edges) : () = 15;
    func move(uint32 id, uint32 pointerId) : () = 16;
    func destroy(uint32 id) : () = 17;

    event format : (uint32 id, pixel_format format) = 18;
    event frame : (uint32 id) = 19;
    event resize : (uint32 id, int width, int height, surface_edge edges) = 20;
    event focus : (uint32 id, bool focus) = 21;
}

service buffer (85) {
    func destroy(uint32 id) : () = 1;

    event release : (uint32 id) = 2;
}

service pointer (86) {
    func set_surface(uint32 pointerId, uint32 surfaceId, int xOffset, int yOffset) : () = 1;
    func grab(uint32 pointerId, uint32 surfaceId) : () = 2;
    func ungrab(uint32 pointerId, uint32 surfaceId) : () = 3;

    event enter : (uint32 pointerId, uint32 surfaceId, int surfaceX, int surfaceY) = 4;
    event leave : (uint32 pointerId, uint32 surfaceId) = 5;
    event move : (uint32 pointerId, uint32 surfaceId, int surfaceX, int surfaceY) = 6;
    event click : (uint32 pointerId, uint32 surfaceId, pointer_button button, bool pressed) = 7;
    event scroll : (uint32 pointerId, uint32 surfaceId, int horz, int vert) = 8;
}

service keyboard (87) {
    func hook(uint32 keyboardId, uint32 surfaceId) : () = 1;
    func unhook(uint32 keyboardId, uint32 surfaceId) : () = 2;

    event key : (uint32 surfaceId, uint32 keycode, uint16 modifiers, bool pressed) = 3;
}
